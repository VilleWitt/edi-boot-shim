#!/bin/bash

# Copyright (C) 2018 Matthias Luescher
#
# Authors:
#  Matthias Luescher
#
# This file is part of edi-boot-shim.
#
# edi-boot-shim is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# edi-boot-shim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with edi-boot-shim.  If not, see <http://www.gnu.org/licenses/>.

# ----------------------------------------------------------------------------
# Small utility that helps updating the u-boot boot configuration
# without copying around initial ramdisks and kernels.
# ----------------------------------------------------------------------------

set -o errexit
set -o nounset
set -o pipefail

echo_usage()
{
    echo "Usage: edi-boot-shim KERNEL_PACKAGE_NAME"
    echo "Example: edi-boot-shim linux-image-4.18.0-2-arm64"
    echo "Please check the man page for more information."
}

cleanup_and_exit()
{
    rm -f ${GENERATED_SCRIPT}
    >&2 echo "Error: Abnormal script termination."
    exit 1
}

DEBIAN_ARCHITECTURE="$(dpkg --print-architecture)"

# default values
BOOTLOADER_DIRECTORY="/boot/firmware"
CHECK_MOUNT=true
BOOT_COMMAND_TEMPLATE="/etc/edi-boot-shim/boot.cmd.rpi.${DEBIAN_ARCHITECTURE}"

EDI_BOOT_SHIM_CFG="/etc/edi-boot-shim/edi-boot-shim.cfg"
if [ -f "${EDI_BOOT_SHIM_CFG}" ]
then
    source "${EDI_BOOT_SHIM_CFG}"
fi

if [[ "$#" -eq 1 && ( "$1" == "-h" || "$1" == "--help" ) ]]
then
    echo_usage
    exit 0
fi

if [ "$#" -ne 1 ]
then
    >&2 echo "Error: Illegal number of parameters."
    echo_usage
    exit 1
fi

if [[ $EUID -ne 0 ]]
then
    >&2 echo "Error: This script must be run as root."
    exit 1
fi

KERNEL_PACKAGE_NAME="${1}"

KERNEL_PACKAGE_PREFIX="linux-image-"
if [[ ${KERNEL_PACKAGE_NAME} != "${KERNEL_PACKAGE_PREFIX}"* ]]
then
    >&2 echo "Error: ${KERNEL_PACKAGE_NAME} does not look like a kernel package name."
    exit 1
fi

if ! dpkg -l ${KERNEL_PACKAGE_NAME} > /dev/null 2>&1
then
    >&2 echo "Error: ${KERNEL_PACKAGE_NAME} is not installed."
    exit 1
fi

KERNEL_PACKAGE_VERSION="${KERNEL_PACKAGE_NAME#${KERNEL_PACKAGE_PREFIX}}"
GENERATED_SCRIPT="/tmp/${KERNEL_PACKAGE_NAME}.boot.cmd"

trap cleanup_and_exit EXIT

cp ${BOOT_COMMAND_TEMPLATE} ${GENERATED_SCRIPT}

sed -i 's@__KERNEL_PACKAGE_VERSION__@'"${KERNEL_PACKAGE_VERSION}"'@' ${GENERATED_SCRIPT}

# This script assumes that the bootloader partition is mounted to BOOTLOADER_DIRECTORY.

if [ "${CHECK_MOUNT}" = false ]
then
    # Mount point check disabled by configuration.
    true
elif ischroot
then
    # Chroot detected - skip mount point check.
    true
elif test -e /usr/bin/systemd-detect-virt && systemd-detect-virt -q
then
    # Virtualization detected - skip mount point check.
    true
elif ! mountpoint -q ${BOOTLOADER_DIRECTORY}
then
    >&2 echo "Error: Missing ${BOOTLOADER_DIRECTORY} - you should probably mount it."
    exit 1
fi

mkdir -p ${BOOTLOADER_DIRECTORY}

case "${DEBIAN_ARCHITECTURE}" in
    "armhf" | "armel")
        U_BOOT_ARCHITECTURE="arm"
	;;
    *)
        U_BOOT_ARCHITECTURE="${DEBIAN_ARCHITECTURE}"
	;;
esac

mkimage -A ${U_BOOT_ARCHITECTURE} -O linux -T script -d ${GENERATED_SCRIPT} ${BOOTLOADER_DIRECTORY}/boot.scr > /dev/null

rm -f ${GENERATED_SCRIPT}
trap - EXIT

echo "Success: ${KERNEL_PACKAGE_NAME} is configured for next boot!"

